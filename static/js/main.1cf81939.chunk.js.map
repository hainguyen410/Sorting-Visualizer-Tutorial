{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","pivotIdx","pivot","swap","partition","temp","SortingVisualizer","React","Component","constructor","props","super","this","state","componentDidMount","resetArray","randomIntFromInterval","setState","mergeSort","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","barTwoIdxOrHeight","type","bubbleSort","arrLength","getBubbleSortAnimations","barIdx","barStyle","testSortingAlgorithms","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","render","createElement","className","map","value","idx","key","onClick","min","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cf81939.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n\n//quick sort\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\n  if (startIdx >= endIdx) return;\n\n  const pivotIdx = partition(array, startIdx, endIdx, animations);\n\n  quickSortHelper(array, startIdx, pivotIdx - 1, animations);\n  quickSortHelper(array, pivotIdx + 1, endIdx, animations);\n}\n\nfunction partition(array, startIdx, endIdx, animations) {\n  let pivot = array[endIdx];\n  let i = startIdx - 1;\n\n  for (let j = startIdx; j < endIdx; j++) {\n    animations.push([j, endIdx, 'compare']); // Comparing current element with the pivot\n    animations.push([j, endIdx, 'revert']); // Reverting the comparison color\n\n    if (array[j] < pivot) {\n      i++;\n      animations.push([i, array[j], 'swap']); // Swap operation\n      animations.push([j, array[i], 'swap']); // Swap operation\n      swap(array, i, j);\n    }\n  }\n\n  animations.push([i + 1, array[endIdx], 'swap']); // Final swap to place pivot correctly\n  animations.push([endIdx, array[i + 1], 'swap']); // Final swap to place pivot correctly\n  swap(array, i + 1, endIdx);\n\n  return i + 1;\n}\n\nfunction swap(array, i, j) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n\n// Example usage:\n// const array = [5, 3, 8, 4, 2];\n// const animations = getQuickSortAnimations(array);\n\n\n\n\n\n//bubble sort\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  let arrLength = array.length;\n  \n  while (arrLength >= 2) {\n    for (let i = 1; i < arrLength; i++) {\n      let k = i - 1;\n      // Push the comparison pair to change their color\n      animations.push([k, i]);\n      // Push again to revert their color\n      animations.push([k, i]);\n      \n      if (array[i] < array[k]) {\n        // Push the swap animation\n        animations.push([k, array[i]]);\n        animations.push([i, array[k]]);\n        \n        // Swap the elements\n        let temp = array[i];\n        array[i] = array[k];\n        array[k] = temp;\n      } else {\n        // No swap, push a dummy animation to keep consistency\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n      }\n    }\n    arrLength--;\n  }\n  \n  return animations;\n}\n\n","import React from 'react';\nimport {getMergeSortAnimations, getBubbleSortAnimations, getQuickSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 300;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array.slice());\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdxOrHeight, type] = animations[i];\n\n      if (type === 'compare' || type === 'revert') {\n        const color = type === 'compare' ? 'red' : 'turquoise';\n        setTimeout(() => {\n          arrayBars[barOneIdx].style.backgroundColor = color;\n          arrayBars[barTwoIdxOrHeight].style.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (type === 'swap') {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          arrayBars[barOneIdx].style.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  \n  \n\n\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 4 < 2;\n  \n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        if (barOneIdx === -1 || barTwoIdx === -1) continue; // Skip dummy animations\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barIdx, newHeight] = animations[i];\n        if (barIdx === -1) continue; // Skip dummy animations\n        const barStyle = arrayBars[barIdx].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  \n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        \n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}